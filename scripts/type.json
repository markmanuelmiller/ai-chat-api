{
  "egressbilling": {
    "modules": ["nginx"],
    "description": "records egress (playback) statistics over HLS and RTMP from nginx",
    "fields": {
      "Module": "name of the module which generated the record (mediasoup, nginx, decoder, encoder, filtergraph)",
      "RecordType": "the name of the record type (egressbilling)",
      "Namespace": "logical namespace grouping for the stream",
      "JobId": "unique identifier for a job (process) - all records from same process share the same jobid",
      "StreamName": "name of the stream being processed",
      "ChannelID": "identifies the elementary stream within a wider scope container (e.g. video or audio channel)",
      "ConsumerID": "relevant for WebRTC - identifies the corresponding sink for a specific client that consumes an elementary stream",
      "MediaType": "type of media - usually 'video' or 'audio'",
      "Codec": "name of the codec if applicable",
      "Time": "start unix timestamp in milliseconds of the epoch",
      "Epoch": "epoch duration in milliseconds (use KB * 8 / Epoch to calculate bitrate as kbps)",
      "Variant": "identifies the played variant of the stream",
      "PlayTime": "total consumed time in ms during epoch (all viewers)",
      "Bytes": "total bytes consumed during epoch (all viewers)",
      "Downloads": "count of downloaded segments during epoch (all viewers); estimated number of viewers"
    }
  },
  "encaudio": {
    "modules": ["mediasoup", "nginx", "encoder"],
    "description": "records statistics of an encoded elementary audio stream",
    "fields": {
      "Module": "name of the module which generated the record (mediasoup, nginx, decoder, encoder, filtergraph)",
      "RecordType": "the name of the record type (encaudio)",
      "Namespace": "logical namespace grouping for the stream",
      "JobId": "unique identifier for a job (process) - all records from same process share the same jobid",
      "StreamName": "name of the stream being processed",
      "ChannelID": "identifies the elementary stream within a wider scope container (e.g. video or audio channel)",
      "ConsumerID": "relevant for WebRTC - identifies the corresponding sink for a specific client that consumes an elementary stream",
      "MediaType": "type of media - usually 'video' or 'audio'",
      "Codec": "name of the codec if applicable",
      "Time": "start unix timestamp in milliseconds of the epoch",
      "Epoch": "epoch duration in milliseconds (use KB * 8 / Epoch to calculate bitrate as kbps)",
      "First PTS": "first received PTS in this epoch (encoder clock, stream time base)",
      "Last PTS": "last received PTS in this epoch (encoder clock, stream time base)",
      "Bytes": "bytes received during epoch",
      "Frames": "count of audio frames received during epoch",
      "Packets": "count of packets received during epoch (always 0 for audio)",
      "Width": "video property not applicable to audio (always 0)",
      "Height": "video property not applicable to audio (always 0)",
      "Keyframes": "video property not applicable to audio (always 0)"
    }
  },
  "encvideo": {
    "modules": ["mediasoup", "nginx", "encoder"],
    "description": "records statistics of an encoded elementary video stream",
    "fields": {
      "Module": "name of the module which generated the record (mediasoup, nginx, decoder, encoder, filtergraph)",
      "RecordType": "the name of the record type (encvideo)",
      "Namespace": "logical namespace grouping for the stream",
      "JobId": "unique identifier for a job (process) - all records from same process share the same jobid",
      "StreamName": "name of the stream being processed",
      "ChannelID": "identifies the elementary stream within a wider scope container (e.g. video or audio channel)",
      "ConsumerID": "relevant for WebRTC - identifies the corresponding sink for a specific client that consumes an elementary stream",
      "MediaType": "type of media - usually 'video' or 'audio'",
      "Codec": "name of the codec if applicable",
      "Time": "start unix timestamp in milliseconds of the epoch",
      "Epoch": "epoch duration in milliseconds (use KB * 8 / Epoch to calculate bitrate as kbps)",
      "First PTS": "first received PTS in this epoch (encoder clock, stream time base)",
      "Last PTS": "last received PTS in this epoch (encoder clock, stream time base)",
      "Bytes": "bytes received during epoch",
      "Frames": "count of frames received during epoch",
      "Packets": "count of packets received during epoch (may exceed frames, e.g. RTP)",
      "Width": "last received frame width",
      "Height": "last received frame height",
      "Keyframes": "count of keyframes received during epoch"
    }
  },
  "rawaudio": {
    "modules": ["decoder", "filtergraph"],
    "description": "records statistics of a raw elementary audio stream",
    "fields": {
      "Module": "name of the module which generated the record (mediasoup, nginx, decoder, encoder, filtergraph)",
      "RecordType": "the name of the record type (rawaudio)",
      "Namespace": "logical namespace grouping for the stream",
      "JobId": "unique identifier for a job (process) - all records from same process share the same jobid",
      "StreamName": "name of the stream being processed",
      "ChannelID": "identifies the elementary stream within a wider scope container (e.g. video or audio channel)",
      "ConsumerID": "relevant for WebRTC - identifies the corresponding sink for a specific client that consumes an elementary stream",
      "MediaType": "type of media - usually 'video' or 'audio'",
      "Codec": "name of the codec if applicable",
      "Time": "start unix timestamp in milliseconds of the epoch",
      "Epoch": "epoch duration in milliseconds (use KB * 8 / Epoch to calculate bitrate as kbps)",
      "Description": "describe if this is a source or sink",
      "First PTS": "first received PTS in this epoch (encoder clock, stream time base)",
      "Last PTS": "last received PTS in this epoch (encoder clock, stream time base)",
      "Bytes": "bytes received during epoch",
      "Samples": "count of last received audio samples",
      "Frames": "count of audio frames received during epoch",
      "Sample Rate": "last sample rate in Hz (calculated from sample_rate_ten * 10)",
      "Channels": "number of channels in last received frame"
    }
  },
  "rawvideo": {
    "modules": ["decoder", "filtergraph"],
    "description": "records statistics of a raw elementary video stream",
    "fields": {
      "Module": "name of the module which generated the record (mediasoup, nginx, decoder, encoder, filtergraph)",
      "RecordType": "the name of the record type (rawvideo)",
      "Namespace": "logical namespace grouping for the stream",
      "JobId": "unique identifier for a job (process) - all records from same process share the same jobid",
      "StreamName": "name of the stream being processed",
      "ChannelID": "identifies the elementary stream within a wider scope container (e.g. video or audio channel)",
      "ConsumerID": "relevant for WebRTC - identifies the corresponding sink for a specific client that consumes an elementary stream",
      "MediaType": "type of media - usually 'video' or 'audio'",
      "Codec": "name of the codec if applicable",
      "Time": "start unix timestamp in milliseconds of the epoch",
      "Epoch": "epoch duration in milliseconds (use KB * 8 / Epoch to calculate bitrate as kbps)",
      "Description": "describe if this is a source or sink",
      "First PTS": "first received PTS in this epoch (encoder clock, stream time base)",
      "Last PTS": "last received PTS in this epoch (encoder clock, stream time base)",
      "KB": "kilobytes processed during epoch",
      "Frames": "count of frames received during epoch",
      "Width": "last received frame width",
      "Height": "last received frame height"
    }
  },
  "rtpconsumer": {
    "modules": ["mediasoup"],
    "description": "records statistics of a WebRTC RTP consumer, that is a playback over WebRTC of an elementary stream",
    "fields": {
      "Module": "name of the module which generated the record (mediasoup, nginx, decoder, encoder, filtergraph)",
      "RecordType": "the name of the record type (rtpconsumer)",
      "Namespace": "logical namespace grouping for the stream",
      "JobId": "unique identifier for a job (process) - all records from same process share the same jobid",
      "StreamName": "name of the stream being processed",
      "ChannelID": "identifies the elementary stream within a wider scope container (e.g. video or audio channel) - for WebRTC also referred to as producer id",
      "ConsumerID": "relevant for WebRTC - identifies the corresponding sink for a specific client that consumes an elementary stream",
      "MediaType": "type of media - usually 'video' or 'audio'",
      "Codec": "name of the codec if applicable",
      "Time": "start unix timestamp in milliseconds of the epoch",
      "Epoch": "epoch duration in milliseconds (use KB * 8 / Epoch to calculate bitrate as kbps)",
      "MaxMs": "send time of packet with max RTP timestamp (server clock)",
      "MaxTS": "max sent RTP timestamp (encoder clock)",
      "Packets": "count of RTP packets sent during epoch",
      "NACK": "count of retransmitted packets during epoch",
      "Bytes": "bytes sent during epoch"
    }
  },
  "rtpproducer": {
    "modules": ["mediasoup"],
    "description": "records statistics of a WebRTC RTP producer, that is a source of an elementary stream over WebRTC",
    "fields": {
      "Module": "name of the module which generated the record (mediasoup, nginx, decoder, encoder, filtergraph)",
      "RecordType": "the name of the record type (rtpproducer)",
      "Namespace": "logical namespace grouping for the stream",
      "JobId": "unique identifier for a job (process) - all records from same process share the same jobid",
      "StreamName": "name of the stream being processed",
      "ChannelID": "identifies the elementary stream within a wider scope container (e.g. video or audio channel) - for WebRTC also referred to as producer id",
      "ConsumerID": "relevant for WebRTC - identifies the corresponding sink for a specific client that consumes an elementary stream",
      "MediaType": "type of media - usually 'video' or 'audio'",
      "Codec": "name of the codec if applicable",
      "Time": "start unix timestamp in milliseconds of the epoch",
      "Epoch": "epoch duration in milliseconds (use KB * 8 / Epoch to calculate bitrate as kbps)",
      "MaxSeq": "last received RTP sequence number (with rollover)",
      "MaxTS": "last received RTP timestamp (with rollover)",
      "MaxPktTm": "arrival time of most recent packet (server clock)",
      "LastRecvTm": "timestamp of last received packet (server clock)",
      "InterArr": "total inter-arrival time in ms (received order)",
      "SeqInterArr": "total inter-arrival time in ms (RTP sequence order)",
      "RecvPkt": "count of received RTP packets",
      "SeqPkt": "count of received in-order RTP packets",
      "Bytes": "total bytes received"
    }
  },  
  "rtpdemuxer": {
    "modules": ["decoder"],
    "description": "records statistics of a demuxer that processes RTP packets and extracts frames of an elementary stream",
    "fields": {
      "Module": "name of the module which generated the record (mediasoup, nginx, decoder, encoder, filtergraph)",
      "RecordType": "the name of the record type (rtpdemuxer)",
      "Namespace": "logical namespace grouping for the stream",
      "JobId": "unique identifier for a job (process) - all records from same process share the same jobid",
      "StreamName": "name of the stream being processed",
      "ChannelID": "identifies the elementary stream within a wider scope container (e.g. video or audio channel)",
      "ConsumerID": "relevant for WebRTC - identifies the corresponding sink for a specific client that consumes an elementary stream",
      "MediaType": "type of media - usually 'video' or 'audio'",
      "Codec": "name of the codec if applicable",
      "Time": "start unix timestamp in milliseconds of the epoch",
      "Epoch": "epoch duration in milliseconds (use KB * 8 / Epoch to calculate bitrate as kbps)",
      "Read": "total calls to read next frame",
      "Succ": "count of successfully read input frames",
      "Drop": "count of failed or incomplete input frames",
      "Idle": "count of read attempts yielding no RTP packets",
      "Wait": "count of waits for out-of-order packets",
      "T/O": "count of packet wait timeouts",
      "Error": "count of unexpected errors",
      "Parse": "count of demux packet parse failures",
      "Retr": "count of retransmitted packets (old RTP sequence)",
      "Gap": "count of re-syncs due to large RTP sequence jumps",
      "Sync": "count of successful channel synchronizations (should occur once per channel)",
      "Buf": "count of frame buffer reallocations"
    }
  }
}
